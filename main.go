package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

var (
	FilePath string
)

func initConfig() {
	FilePath = "C:\\Windows\\System32\\drivers\\etc\\hosts"
	conf, err := os.Open("conf.txt")
	if err != nil {
		panic(err)
	}
	confBuf := bufio.NewReader(conf)
	for {
		a, _, err := confBuf.ReadLine()
		if err == io.EOF {
			break
		}
		if strings.Contains(string(a), "filePath") {
			FilePath = strings.Replace(string(a), "filePath=", "", -1)
			FilePath = strings.Replace(FilePath, "\"", "", -1)
		}
	}
	fmt.Println(FilePath)
}

func main() {
	initConfig()
	ips, err := get521XueWeiHanGitHubIP()
	if err != nil {
		log.Printf("ERRO: get521XueWeiHanGitHubIP failed: %#v\n", err)
		return
	}
	err = writeHostsByGet521XueWeiHanIPs(ips)
	if err != nil {
		log.Printf("ERRO: writeHostsByGet521XueWeiHanIPs failed: %#v\n", err)
		return
	}
}

func writeHostsByGet521XueWeiHanIPs(ips [][]string) error {
	f, err := os.Open(FilePath)
	if err != nil {
		panic(err)
	}
	buf := bufio.NewReader(f)
	var result = ""
	var have = false
	var pass = false
	for {
		a, _, err := buf.ReadLine()
		if err == io.EOF {
			break
		}
		if !pass {
			result += string(a) + "\n"
			if strings.Contains(string(a), "# ====== Generated by UPDATE-GITHUB-IP start ======") {
				pass = true
				have = true
				result += "# ======    DO   NOT   EDIT   THIS   AREA    ======\n"
				for _, v := range ips {
					result += v[0] + " " + v[1] + "\n"
				}
			}
		} else {
			if strings.Contains(string(a), "# ====== Generated by UPDATE-GITHUB-IP end ======") {
				pass = false
				result += string(a) + "\n"
			}
		}
	}
	err = f.Close()
	if err != nil {
		panic(err)
	}
	if !have {
		result += "# ====== Generated by UPDATE-GITHUB-IP start ======\n"
		result += "# ======    DO   NOT   EDIT   THIS   AREA    ======\n"
		for _, v := range ips {
			result += v[0] + " " + v[1] + "\n"
		}
	}
	fmt.Println(result)
	err = os.Chmod(FilePath, 0666)
	if err != nil {
		panic(err)
	}
	fw, err := os.OpenFile(FilePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) //os.O_TRUNC清空文件重新写入，否则原文件内容可能残留
	if err != nil {
		panic(err)
	}
	w := bufio.NewWriter(fw)
	_, err = w.WriteString(result)
	if err != nil {
		panic(err)
	}
	err = w.Flush()
	if err != nil {
		panic(err)
	}
	return err
}
